<?xml version="1.0" encoding="UTF-8"?>
<c:model
    xmlns:c="urn:webdetails/com/2012"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:webdetails/com/2012 ../../schema/com_2012.xsd"
    xmlns="http://www.w3.org/1999/xhtml">

    <c:complexType name="AnyContinuousCartesianAxis"
                   space="pvc.options.axes"
                   base="pvc.options.axes.CartesianAxis"
                   use="expanded"
                   facets="pvc.options.axes.ContinuousCartesianAxisFacet
                           pvc.options.axes.NumericCartesianAxisFacet
                           pvc.options.axes.CartesianAxisTicksFacet">
        <c:documentation>
            The options documentation class of the cartesian axis panel
            for continuous scale types.

            For additional information, please see <c:link to="pvc.options.axes.CartesianAxis" />.
        </c:documentation>

        <c:property name="extensionPoints" type="pvc.options.ext.AnyContinuousCartesianAxisExtensionPoints" category="Style" expandUse="optional">
            <c:documentation>
                The extension points object contains style definitions for
                the marks of the panel.
            </c:documentation>
        </c:property>
    </c:complexType>

    <c:complexType name="AnyContinuousCartesianAxisExtensionPoints"
                   space="pvc.options.ext"
                   use="expanded"
                   base="pvc.options.ext.CartesianAxisExtensionPoints"
                   facets="pvc.options.ext.ContinuousCartesianAxisExtensionPointsFacet
                           pvc.options.ext.NumericCartesianAxisExtensionPointsFacet
                           pvc.options.ext.CartesianAxisTicksExtensionPointsFacet">
        <c:documentation>
            The extension points of the cartesian axis panel for continuous scale types.

            Axes extension points can also be specified directly at the chart options level.

            To use an extension point you must find its full name, by joining:
            <ol>
                <li>panel property name (ex: <tt>xAxis</tt>)</li>
                <li>extension property (ex: <tt>zeroLine</tt>)</li>
                <li>the "_" character</li>
                <li>extension sub-property (ex: <tt>lineWidth</tt>)</li>
            </ol>
            and obtaining, for the examples, the camel-cased name: <tt>xAxisZeroLine_lineWidth</tt>
            (see <c:link to="http://en.wikipedia.org/wiki/CamelCase" />).
        </c:documentation>
    </c:complexType>

    <c:facetType name="ContinuousCartesianAxisFacet"
                   space="pvc.options.axes">
        <c:documentation>
            The options documentation class of the cartesian axis panel
            for continuous scale types (numeric or timeSeries).
        </c:documentation>

        <c:property name="domainRoundMode"
                    type="pvc.options.varia.AxisDomainRoundingMode"
                    default="'tick'"
                    category="Continuous-Numeric > Style">
            <c:documentation>
                The axis' domain rounding mode (applies to continuous axes).
            </c:documentation>
        </c:property>

        <c:property name="preserveTickAlignment" 
                    type="boolean"
                    category="Continuous > Scale">
            
            <c:documentation>
                When using a sliding window for real time applications,
                the ticks alignment is used to guarantee that the ticks keep the 
                same regularity from one rendering to the next (applies to continuous axes).

                This option works best with a <c:link to="pvc.options.varia.AxisDomainRoundingMode#None" /> 
                value of <tt>none</tt>:

                When <tt>true</tt>, it is ensured that the ticks of each new render are aligned with the ticks
                of the previous render, sharing values if possible.

                When <tt>false</tt>, the ticks will be rendered following the domain of the data and
                not taking in account previous tick values.

                <h3>Default</h3>
                If a sliding window exists: <tt>true</tt>, otherwise, <tt>false</tt>.
                See <c:link to="pvc.options.SlidingWindow" />.
            </c:documentation>
        </c:property>

        <c:property name="desiredTickCount" type="number" category="Continuous > Style">
            <c:documentation>
                The <i>desired</i> number of major ticks.

                A positive integer, possibly infinite.

                Attention: This option is ignored when <c:link to="#tickUnit" /> is specified!

                Depending on
                the domain values extent,
                the labels' font size,
                the available space,
                the axis' orientation,
                and the minimum label spacing
                (given by <c:link to="pvc.options.axes.AnyNonHierarchicalCartesianAxis#labelSpacingMin" />),
                a maximum number of ticks is implied.

                The value of <i>desiredTickCount</i> is clamped to this layout imposed maximum.

                When specified and finite,
                the tick calculation algorithm chooses,
                amongst possible tick units,
                the one that results in a number of ticks
                that is <b>closest</b> to the specified <b>desired</b> value.

                When specified and infinite (<tt>Infinity</tt>),
                the layout imposed maximum is used instead.

                <p>
                    <b>The minimum tick count</b>
                </p>

                This actually depends on the value of <c:link to="#domainRoundMode" />.
                <ul>
                    <li>
                        <p><b><i>domainRoundMode</i> is <c:link to="pvc.options.varia.AxisDomainRoundingMode#Tick" /></b></p>

                        For tick counts greater than two or three, the algorithm strives to satisfy the user's desire!

                        However,
                        the algorithm always generates at least two or three ticks,
                        ignoring both <i>desiredTickCount</i> and <i>labelSpacingMin</i>,
                        if needed.

                        At least three ticks are generated for numeric domains having both negative and positive data.
                        There are also temporal domain cases where a minimum of three ticks are generated.

                        When the labels of these ticks really overlap,
                        one of the labels is kept visible and the other(s) is hidden.

                        This behavior ensures that, unless it is really impossible to do so,
                        the axis serves one of its main purposes - allowing to translate visual lengths.

                        When three tick labels overlap,
                        the middle label is kept visible and the end labels are hidden.

                        When two tick labels overlap,
                        one of the labels
                        — the one with tick value <tt>0</tt>, if any, or the first one, if none —
                        is kept visible and the other is hidden.
                    </li>
                    <li>
                        <p><b><i>domainRoundMode</i> is
                            <c:link to="pvc.options.varia.AxisDomainRoundingMode#None" /> or
                            <c:link to="pvc.options.varia.AxisDomainRoundingMode#Nice" /></b></p>

                        The algorithm always generates at least one tick.
                    </li>
                </ul>


                Specifying a value of <tt>1</tt> results in the minimum possible tick count.

                <p>
                    <b>Domain type specifics</b>
                </p>

                <ul>
                    <li>
                        <b>Numeric</b>

                        When unspecified, the default value is <tt>Infinity</tt>.
                    </li>
                    <li>
                        <b>Temporal</b>

                        The value must be less than or equal to <tt>10</tt>.

                        When unspecified, the default value is <tt>5</tt>.
                    </li>
                </ul>

                See <c:link to="#tickUnit" /> for more information.
            </c:documentation>
        </c:property>

        <c:property name="tickUnit" type="number string pvc.options.varia.TimeInterval" category="Continuous > Style">
            <c:documentation>
                The ticks' major unit (difference in domain value between consecutive ticks).

                When a number, it must be a non-negative, finite, integer.

                <ul>
                    <li>
                        <b>Numeric axis</b>

                        Specified values are rounded down to one of the standard precisions:
                        a number that is an integer power of 10,
                        multiplied by 1, 2 or 5 (e.g. 0.1, 0.2, 0.5, 1, 2, 5, 10, 20, 50, ...).
                    </li>
                    <li>
                        <b>Temporal axis</b>

                        When a number or numeric string is specified,
                        it is a the number of milliseconds of a duration.

                        It is rounded down to an integer and used directly.
                        By default, the corresponding tick format will be the one of the
                        greatest standard unit that is below the specified value.

                        When a (non-numeric) string is specified,
                        it should be the code of a standard precision,
                        optionally immediately preceded by an integer multiple
                        (e.g. <tt>'25d'</tt> means twenty five days).

                        The standard time precision codes are defined in <c:link to="pvc.options.varia.TimeInterval" />

                        This option should be used instead of the now deprecated
                        <c:link to="pvc.options.marks.QuantitativeScaleExtensionPoint#dateTickPrecision" />
                        extension point, via <c:link to="#extensionPoints" /> and then <i>scale</i>.
                    </li>
                </ul>

                <b>Relations with other options</b>

                When both <c:link to="#tickUnitMin" /> and <c:link to="#tickUnitMax" /> are specified,
                and the former is greater than or equal to the later,
                then it is as if <i>tickUnit</i> had been specified with the value of <i>tickUnitMin</i>.

                When both <i>tickUnit</i> and <c:link to="#tickUnitMin" /> are specified,
                and <i>tickUnit</i> is less than <i>tickUnitMin</i>,
                then the value of <i>tickUnitMin</i> is used instead.

                When both <i>tickUnit</i> and <c:link to="#tickUnitMax" /> are specified,
                and <i>tickUnit</i> is greater than <i>tickUnitMax</i>,
                then the value of <i>tickUnitMax</i> is used instead.

                When specified or implied,
                both <c:link to="#desiredTickCount" /> and <i>labelSpacingMin</i>
                are ignored.

                See related axis options:
                <c:link to="#tickUnitMin" />,
                <c:link to="#tickUnitMax" />,
                <c:link to="#domainRoundMode" />,
                <c:link to="#desiredTickCount" /> and
                <c:link to="pvc.options.axes.AnyNonHierarchicalCartesianAxis#labelSpacingMin" />.

                For numeric axes, see also
                <c:link to="pvc.options.axes.NumericCartesianAxis#tickExponentMin" /> and
                <c:link to="pvc.options.axes.NumericCartesianAxis#tickExponentMax" />.
            </c:documentation>
        </c:property>

        <c:property name="tickUnitMin" type="number string" default="0" category="Continuous > Style">
            <c:documentation>
                The minimum ticks' major unit (difference in domain value between consecutive ticks).

                Use this option to ensure that ticks are separated by a minimum value.
                For example, a value of <tt>1</tt> ensures ticks are integers,
                and of <tt>'d'</tt>, that hour ticks are not used.

                When a number, it must be a non-negative finite integer.

                The same value parsing rules of <c:link to="#tickUnit" /> apply to this option,
                with the exception that rounding to a standard precision is performed <i>up</i>.

                For numeric axes,
                the value of this option is combined with that of
                <c:link to="pvc.options.axes.NumericCartesianAxis#tickExponentMin" />,
                resulting in the most restrictive one being used.

                See <c:link to="#tickUnit" /> for more information.
            </c:documentation>
        </c:property>

        <c:property name="tickUnitMax" type="number string" default="Infinity" category="Continuous > Style">
            <c:documentation>
                The maximum ticks' major unit (difference in domain value between consecutive ticks).

                Use this option to ensure that ticks are separated by at most a certain value.
                For example,
                a value of <tt>100</tt> ensures that the unit <tt>200</tt> will not be used,
                and of <tt>'3m'</tt> that a year or semester unit will not be used.

                As another example,
                to ensure that the tick unit is less than <tt>1000</tt>,
                either
                specify a <i>tickUnitMax</i> of <tt>900</tt>, or, maybe better,
                specify a <c:link to="pvc.options.axes.NumericCartesianAxis#tickExponentMax" /> of <tt>2</tt>.

                When a number, it must be a positive integer.

                The same value parsing rules of <c:link to="#tickUnit" /> apply to this option.

                For numeric axes,
                the value of this option is combined with that of
                <c:link to="pvc.options.axes.NumericCartesianAxis#tickExponentMax" />,
                resulting in the most restrictive one being used.

                See <c:link to="#tickUnit" /> for more information.
            </c:documentation>
        </c:property>

        <c:property name="fixedMin" type="number string Date" category="Continuous > Scale">
            <c:documentation>
                The fixed minimum value of the axis domain (applies to continuous axes).

                The value is converted using the
                <c:link to="pvc.options.DimensionType#converter" /> of
                the first dimension of the first role bound to the axis.

                For example, if the base axis shows the <i>category</i> dimension,
                and the dimension is configured as type Date,
                and it uses the default converter, then it accepts:
                <ul>
                    <li>values of type <tt>number</tt>,
                        representing milliseconds as returned by
                        the JavaScript's <tt>Date.getTime()</tt> method
                    </li>
                    <li>values of type <tt>Date</tt>, which are accepted as is</li>
                    <li>values of type <tt>string</tt>,
                        in a format defined by the dimension's
                        <c:link to="pvc.options.DimensionType#rawFormat" />.
                    </li>
                </ul>

                The value may be bigger or smaller than the minimum value of the data domain.

                For more information, see <c:link to="#fixedLength" />.
            </c:documentation>
        </c:property>

        <c:property name="fixedMax" type="number string Date" category="Continuous > Scale">
            <c:documentation>
                The fixed maximum value of the axis domain (applies to continuous axes).

                The value is converted using the <c:link to="pvc.options.DimensionType#converter" /> of
                the first dimension of the first role bound to the axis.

                For example, if the base axis shows the <i>category</i> dimension,
                and the dimension is configured as type <tt>Date</tt>,
                and it uses the default converter, then it accepts:
                <ul>
                    <li>
                        values of type <tt>number</tt>,
                        representing milliseconds as returned by
                        the JavaScript's <tt>Date.getTime()</tt> method;
                    </li>
                    <li>
                        values of type <tt>Date</tt>, which are accepted as is;
                    </li>
                    <li>
                        values of type <tt>string</tt>,
                        in a format defined by the dimension's
                        <c:link to="pvc.options.DimensionType#rawFormat" />.
                    </li>
                </ul>

                The value may be bigger or smaller than the maximum value of the data domain.

                For more information, see <c:link to="#fixedLength" />.
            </c:documentation>
        </c:property>

        <c:property name="fixedLength" type="number pvc.options.varia.TimeInterval" category="Continuous > Scale">
            <c:documentation>
                The fixed length of the axis domain (applies to continuous axes).

                A string value is converted to a number.

                The value may be bigger or smaller than the actual length of the data.

                By default, the domain of the axis is determined from the actual domain of the data.
                This and other options allow modifying the axis domain.

                When the axis domain gets smaller than the data domain,
                and <c:link to="pvc.options.charts.CartesianChart#leafContentOverflow" /> is set to <tt>auto</tt>,
                the default value,
                clipping is activated in the related plot panels and any overflown content is hidden.

                <h3>Phase I</h3>

                The phase I axis domain is determined by the following procedure:
                <ol>
                    <li>
                        If <tt>fixedLength</tt> is not specified:
                        <ol>
                            <li>
                                If neither <tt>fixedMin</tt> and <tt>fixedMax</tt> are specified,
                                the axis domain is the data domain;
                                option <tt>originIsZero</tt> may augment the axis domain, on one of its sides;
                            </li>
                            <li>
                                If both <tt>fixedMin</tt> and <tt>fixedMax</tt> are specified,
                                the axis domain is fully determined; it's length is implied;
                                option <tt>originIsZero</tt> is ignored;
                            </li>
                            <li>
                                If <tt>fixedMin</tt> is specified (and <tt>fixedMax</tt> is not)
                                the axis domain minimum is <tt>fixedMin</tt> and
                                the axis domain maximum is the data domain maximum, possibly corrected by
                                option <tt>originIsZero</tt>;
                            </li>
                            <li>
                                Else, (if <tt>fixedMax</tt> is specified and <tt>fixedMin</tt> is not,)
                                the axis domain maximum is <tt>fixedMax</tt> and
                                the axis domain minimum is the data domain minimum, possibly corrected by
                                option <tt>originIsZero</tt>;
                            </li>
                        </ol>
                    </li>
                    <li>
                        If <tt>fixedLength</tt> is specified, option <tt>originIsZero</tt> is ignored.

                        The limits of the axis domain are determined as follows:
                        <ol>
                            <li>
                                If <tt>fixedMin</tt> is specified, the axis domain maximum is implied:<br/>
                                <tt>max = fixedMin + fixedLength</tt>;<br/>
                                options <tt>originIsZero</tt>, <tt>fixedMax</tt> are ignored;
                                option <tt>domainAlign</tt> is ignored in this phase;
                            </li>
                            <li>
                                If <tt>fixedMax</tt> is specified, the axis domain minimum is implied:<br/>
                                <tt>min = fixedMax - fixedLength</tt>;<br/>
                                option <tt>originIsZero</tt> is ignored;
                                option <tt>domainAlign</tt> is ignored in this phase;
                            </li>
                            <li>
                                Else, <tt>domainAlign</tt> is either specified or defaults to <tt>center</tt>.
                                The axis domain is aligned to either the minimum, maximum or center of the data domain
                                and then taken to have the specified fixed length.

                                It is determined as follows:
                                <ul>
                                    <li>
                                        If <tt>domainAlign</tt> is <tt>min</tt>, the axis domain minimum is that of
                                        the actual data and the axis domain maximum is implied:<br/>
                                        <tt>max = min(data) + fixedLength</tt>;
                                    </li>
                                    <li>
                                        If <tt>domainAlign</tt> is <tt>max</tt>, the axis domain maximum is that of
                                        the actual data and the axis domain minimum is implied:<br/>
                                        <tt>min = max(data) - fixedLength</tt>;
                                    </li>
                                    <li>
                                        Else, <tt>domainAlign</tt> is <tt>center</tt>, or defaults to it,
                                        and both axis domain limits are determined from the actual data domain,
                                        as follows:
                                        <ul>
                                            <li><tt>min = center(data) - fixedLength / 2</tt></li>
                                            <li><tt>max = center(data) + fixedLength / 2</tt></li>
                                        </ul>
                                        where <tt>center(data)</tt> is determined as:<br/>
                                        <tt>center(data) = (max(data) - min(data)) / 2</tt>.
                                    </li>
                                </ul>
                            </li>
                        </ol>
                    </li>
                </ol>

                <h3>Phase II</h3>

                In phase II, additional options may modify the phase I axis domain.

                If <c:link to="#domainRoundMode" /> is <tt>nice</tt>, the axis domain is made "nice",
                by making sure that its ends are "nice" numbers.

                If <c:link to="#ratio" /> is specified (or a ratio is imposed due to <c:link to="#preserveRatio" />),
                the length of the axis domain is imposed by the length of the axis' range (a number of pixels).
                The axis domain is aligned relative to the phase I axis domain, according to the value
                of <c:link to="#domainAlign" />.

                If <c:link to="#domainRoundMode" /> is <tt>tick</tt>,
                the phase I axis domain is extended to include the calculated ticks and only then are
                the <tt>ratio</tt> and <tt>domainAlign</tt> options processed, so that the domain aligns to
                the calculated ticks.

                <h3>Default</h3>

                If a sliding window exists, it is its length <c:link to="pvc.options.SlidingWindow#length" />,
                otherwise, <tt>null</tt>.

                For more information, see:
                <c:link to="#fixedMin" />,
                <c:link to="#fixedMax" />,
                <c:link to="#domainAlign" />,
                <c:link to="#ratio" /> and
                <c:link to="#originIsZero" />.
            </c:documentation>
        </c:property>

        <c:property name="domainAlign" type="pvc.options.varia.AxisDomainAlign" default="'center'" category="Continuous > Scale">
            <c:documentation>
                The domain alignment to use when the domain has a fixed or implied length (applies to continuous axes).

                For more information, see <c:link to="#fixedLength" />.
            </c:documentation>
        </c:property>

        <c:property name="originIsZero" type="boolean" category="Continuous > Scale">
            <c:documentation>
                Indicates if it should be ensured that the 0 domain value is shown (applies to numeric axes).

                The properties
                <tt>fixedMin</tt> and
                <tt>fixedMax</tt> have precedence over this one.

                If this property is <tt>true</tt>
                and respecting it would require changing
                the minimum value,
                but the option <tt>fixedMin</tt> is also specified,
                then this property is ignored.
                The same would apply if
                it were required to change
                the maximum value,
                but the property <tt>fixedMax</tt> was also specified.

                For more information, see: <c:link to="#fixedLength" />.
            </c:documentation>
        </c:property>

        <c:property name="ratio" type="number pvc.options.varia.TimeRatio" category="Continuous > Scale">
            <c:documentation>
                The fixed ratio value which is the proportion between the axis' range and domain lengths (applies to continuous axes).

                This property can be defined as a number or a string.

                For example, if the desired correspondence is that 100 pixels (range) represent 25 days (domain),
                the option can be specified with any of the following equivalent forms:
                <ul>
                    <li><tt>ratio = "100/25d"</tt>; or</li>
                    <li><tt>ratio = "100/216e7"</tt> (<tt>"25d" = 216e7</tt> milliseconds); or</li>
                    <li><tt>ratio = 4.63e-8</tt>.</li>
                </ul>

                For more information,
                see <c:link to="#fixedLength" /> and <c:link to="#preserveRatio" />.
            </c:documentation>
        </c:property>

        <c:property name="preserveRatio" type="boolean" category="Continuous > Scale">
            <c:documentation>
                Indicates if the initial proportion between the axis' domain and range lengths should be
                preserved between renders (applies to continuous axes).

                When using a sliding window for real time applications,
                the ratio preservation allows for a stable visualization,
                regardless of the data values provided.

                When <tt>preserveRatio</tt> is specified,
                following renders will use the <i>effective ratio</i> of the first render,
                whether the ratio was initially fixed using <tt>ratio</tt> or not.

                See <c:link to="pvc.options.SlidingWindow" />.

                <h3>Default</h3>
                If a sliding window exists: <tt>true</tt>, otherwise, <tt>false</tt>.

                See <c:link to="#ratio" />.
            </c:documentation>
        </c:property>

        <c:property name="domainScope" type="pvc.options.varia.AxisDomainScope" category="Continuous > Scale" default="'global'">
            <c:documentation>
                Controls the type of scale domain coordination that should be performed
                amongst the axes of the same id of each <i>small chart</i> (applies to continuous axes).

                The value <c:link to="pvc.options.varia.AxisDomainScope#Row" />
                can only be specified if the axis has vertical orientation.
                Conversely,
                the value <c:link to="pvc.options.varia.AxisDomainScope#Column" />
                can only be specified if the axis has horizontal orientation.
            </c:documentation>
        </c:property>

        <c:property name="minorTicks" type="boolean" default="true" category="Continuous > Style">
            <c:documentation>
                Indicates if minor ticks are shown between major ticks (applies to continuous axes).
            </c:documentation>
        </c:property>
    </c:facetType>

    <c:facetType name="ContinuousCartesianAxisExtensionPointsFacet" space="pvc.options.ext">
        <c:property name="minorTicks" type="pvc.options.marks.RuleExtensionPoint" category="Continuous > Style">
            <c:documentation>
                The extension point of a <i>minor</i> tick rule mark (applies to continuous axes).
            </c:documentation>
        </c:property>

        <c:property name="scale" type="pvc.options.marks.QuantitativeScaleExtensionPoint"
                    category="Continuous > Scale">
            <c:documentation>
                The extension point of the axis' scale object (applies to continuous axes).
            </c:documentation>
        </c:property>
    </c:facetType>

</c:model>
